name: Readme Tree (Reusable on PR, external script)

on:
  workflow_call:
    inputs:
      commit_message:
        type: string
        default: "chore: update README tree structure"
      exclude_pattern:
        type: string
        default: ".git|node_modules|.github"
      working_directory:
        type: string
        default: "."
      script_repo:
        description: "owner/repo that contains the script"
        type: string
        required: true
      script_path:
        description: "path to script inside script_repo"
        type: string
        default: "scripts/update-readme-tree.sh"

permissions:
  contents: write
  pull-requests: write

jobs:
  update-readme-on-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR head (downstream repo)
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref_name }}
          fetch-depth: 0

      - name: Configure git identity (early)
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Install tree
        run: |
          sudo apt-get install -y tree

      # Derive the reusable workflow's ref (the part after '@' in github.workflow_ref)
      - name: Derive script ref from reusable workflow ref
        id: derive
        run: |
          # e.g., "Coalfire-CF/Actions/.github/workflows/org-tree-readme.yml@refs/heads/fix/org-tree-readme"
          WF_REF="${{ github.workflow_ref }}"
          SCRIPT_REF="${WF_REF#*@}"   # take the substring after '@' -> refs/heads/...
          echo "wf_ref=$SCRIPT_REF" >> "$GITHUB_OUTPUT"

      # Try to checkout the script repo at the same ref as the reusable workflow
      - name: Checkout script repo (match reusable ref)
        id: checkout_wfref
        uses: actions/checkout@v5
        continue-on-error: true
        with:
          repository: ${{ inputs.script_repo }}
          ref: ${{ steps.derive.outputs.wf_ref }}
          path: _script_repo
          fetch-depth: 1

      # Fallback to default branch of the script repo if matching ref didn't exist
      - name: Checkout script repo (default branch fallback)
        if: ${{ steps.checkout_wfref.outcome == 'failure' }}
        uses: actions/checkout@v5
        with:
          repository: ${{ inputs.script_repo }}
          path: _script_repo
          fetch-depth: 1

      - name: Verify script exists
        run: |
          set -e
          SCRIPT="_script_repo/${{ inputs.script_path }}"
          test -f "$SCRIPT" || { echo "Missing script: $SCRIPT"; exit 1; }
          chmod +x "$SCRIPT"

      - name: Run updater
        id: run
        env:
          EXCLUDE_PATTERN: ${{ inputs.exclude_pattern }}
        run: |
          set +e
          "_script_repo/${{ inputs.script_path }}"
          code=$?
          echo "exit_code=$code" >> $GITHUB_OUTPUT
          exit 0

      # Ensure the script checkout never gets committed
      - name: Keep _script_repo out of the index
        run: |
          set -e
          echo "_script_repo" >> .git/info/exclude
          git restore --staged _script_repo 2>/dev/null || true
          rm -rf _script_repo || true

      # One-time self-heal if a stray submodule pointer landed previously
      - name: remove stray _script_repo gitlink if present
        id: heal
        run: |
          set -e
          changed=0
          # gitlink shows as mode 160000 in ls-files
          if git ls-files -s _script_repo 2>/dev/null | grep -q '^160000'; then
            echo "Removing stray _script_repo gitlink from indexâ€¦"
            git rm -f --cached _script_repo || true
            if [ -f .gitmodules ]; then
              git config -f .gitmodules --remove-section submodule._script_repo 2>/dev/null || true
              if ! git config -f .gitmodules -l >/dev/null 2>&1; then
                rm -f .gitmodules
              fi
              git add .gitmodules || true
            fi
            if ! git diff --cached --quiet; then
              git commit -m "chore: remove stray _script_repo gitlink"
              changed=1
            fi
          else
            echo "No _script_repo gitlink present."
          fi
          echo "changed=$changed" >> "$GITHUB_OUTPUT"

      - name: Push self-heal commit (if any)
        if: ${{ steps.heal.outputs.changed == '1' }}
        run: git push origin HEAD

      - name: Commit & push if changed
        if: ${{ steps.run.outputs.exit_code == '10' }}
        run: |
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "${{ inputs.commit_message }}"
          git push origin HEAD
