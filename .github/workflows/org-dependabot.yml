name: Refresh dependabot.yml & Terraform sources

on:
  workflow_call:
    inputs:
      head_branch:
        description: "Branch to update (pass github.head_ref for PRs)"
        required: true
        type: string
      include_github_actions:
        description: 'Add a "github-actions" update stanza'
        required: false
        type: string
        default: "true"
      default_interval:
        description: 'Schedule interval for Terraform directories'
        required: false
        type: string
        default: "daily"
      depb_path:
        description: "Path to dependabot.yml"
        required: false
        type: string
        default: ".github/dependabot.yml"
      commit_message:
        description: "Commit message"
        required: false
        type: string
        default: "chore: refresh dependabot.yml & Terraform sources"

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target branch
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.head_branch }}
          fetch-depth: 0

      - name: Configure git identity
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global --add safe.directory '*'

      - name: Run refresh (embedded script)
        id: run
        env:
          INCLUDE_GITHUB_ACTIONS: ${{ inputs.include_github_actions }}
          DEFAULT_INTERVAL: ${{ inputs.default_interval }}
          REPO_ROOT: ${{ github.workspace }}
          DEPB_PATH: ${{ inputs.depb_path }}
        run: |
          set -euo pipefail
          cat > /tmp/dependabot_refresh.sh <<'BASH'
          #!/usr/bin/env bash
          set -euo pipefail

          # =========================
          # Config (override via env)
          # =========================
          DEPB_PATH="${DEPB_PATH:-.github/dependabot.yml}"
          INCLUDE_GITHUB_ACTIONS="${INCLUDE_GITHUB_ACTIONS:-true}"   # "false" to skip GH Actions stanza
          DEFAULT_INTERVAL="${DEFAULT_INTERVAL:-daily}"               # dependabot schedule for terraform dirs
          REPO_ROOT="${REPO_ROOT:-$(git rev-parse --show-toplevel 2>/dev/null || pwd)}"

          # =========================
          # Helpers
          # =========================
          log() { printf '%s\n' "$*" >&2; }
          die() { log "❌ $*"; exit 1; }

          require_tools() {
            for t in awk sort perl find; do
              command -v "$t" >/dev/null 2>&1 || die "$t is required"
            done
          }

          # Return unique, absolute-style dirs (/...) that contain at least one .tf file
          find_tf_dirs() {
            mapfile -d '' -t files < <(find "$REPO_ROOT" -type f -name '*.tf' -not -path '*/.git/*' -print0)

            declare -A seen=()
            declare -a out=()

            for f in "${files[@]}"; do
              dir="$(dirname "$f")"
              # normalize to repo-relative
              if [[ "$dir" == "$REPO_ROOT" ]]; then
                dir="/"
              else
                dir="${dir#"$REPO_ROOT"}"
                [[ -z "$dir" ]] && dir="/"
                [[ "${dir:0:1}" != "/" ]] && dir="/$dir"
              fi
              # sanitize
              dir="$(printf '%s' "$dir" | sed -E 's#/+#/#g; s#/\./#/#g; s#/$##')"
              [[ -z "$dir" ]] && dir="/"

              if [[ -z "${seen[$dir]+x}" ]]; then
                seen[$dir]=1
                out+=("$dir")
              fi
            done

            printf "%s\n" "${out[@]}" | sort -u
          }

          # Build dependabot.yml content to stdout
          generate_dependabot_yaml() {
            local -a dirs=("$@")

            cat <<'YAML'
          # Auto-generated by dependabot_refresh.sh
          # See: https://docs.github.com/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file

          version: 2
          updates:
          YAML

            if [[ "${INCLUDE_GITHUB_ACTIONS}" == "true" ]]; then
              cat <<'YAML'
            - package-ecosystem: "github-actions"
              directory: "/"
              schedule:
                interval: "daily"
              commit-message:
                prefix: "chore"
                include: "scope"
          YAML
            fi

            # Only emit Terraform blocks if we actually found Terraform directories
            if ((${#dirs[@]} > 0)); then
              for d in "${dirs[@]}"; do
                [[ "$d" == "." || -z "$d" ]] && d="/"
                [[ "${d:0:1}" != "/" ]] && d="/$d"
                cat <<YAML
            - package-ecosystem: "terraform"
              directory: "${d}"
              schedule:
                interval: "${DEFAULT_INTERVAL}"
              commit-message:
                prefix: "chore"
                include: "scope"
          YAML
              done
            fi
          }

          # Safe write to a path (no backup); returns 0 if wrote/changed, 1 if no change
          safe_write_file() {
            local target="$1"
            local temp="$2"
            mkdir -p "$(dirname "$target")"

            if [[ -f "$target" ]]; then
              if diff -q "$target" "$temp" >/dev/null 2>&1; then
                rm -f "$temp"
                return 1
              fi
            fi
            mv -f "$temp" "$target"
            return 0
          }

          # Rewrite Terraform module sources: github.com/... → git::https://github.com/...
          rewrite_tf_sources() {
            local changed_files=0
            local matched_lines=0

            while IFS= read -r -d '' tf; do
              if grep -Eq 'source\s*=\s*"\s*github\.com/' "$tf"; then
                local count
                count=$(grep -E 'source\s*=\s*"\s*github\.com/' -n "$tf" | wc -l | tr -d ' ')
                matched_lines=$((matched_lines + count))
                perl -0777 -i -pe 's/(source\s*=\s*")\s*github\.com\//${1}git::https:\/\/github.com\//g' "$tf"
                changed_files=$((changed_files + 1))
              fi
            done < <(find "$REPO_ROOT" -type f -name '*.tf' -not -path '*/.git/*' -print0)

            log "🔧 Rewrote module sources in $changed_files file(s); matched $matched_lines source line(s)."
            (( changed_files > 0 ))
          }

          # =========================
          # Main
          # =========================
          require_tools

          log "📂 Repo root: $REPO_ROOT"
          mapfile -t tf_dirs < <(find_tf_dirs)

          if ((${#tf_dirs[@]} == 0)); then
            log "ℹ️  No .tf files found; generating dependabot.yml with GitHub Actions only (if enabled)."
          fi

          tmpfile="$(mktemp)"
          generate_dependabot_yaml "${tf_dirs[@]}" > "$tmpfile"

          changed_yml=0
          if safe_write_file "$DEPB_PATH" "$tmpfile"; then
            changed_yml=1
            log "✅ Wrote ${DEPB_PATH}"
          else
            log "✅ ${DEPB_PATH} already up to date."
          fi

          changed_tf=0
          if ((${#tf_dirs[@]} > 0)); then
            rewrite_tf_sources && changed_tf=1 || true
          fi

          # Exit 10 if anything changed so the workflow can decide to commit
          if (( changed_yml == 1 || changed_tf == 1 )); then
            exit 10
          else
            exit 0
          fi
          BASH

          chmod +x /tmp/dependabot_refresh.sh
          set +e
          /tmp/dependabot_refresh.sh
          code=$?
          echo "exit_code=$code" >> "$GITHUB_OUTPUT"
          set -e

          echo "---- git status ----"
          git status --short || true
          echo "---- changed files ----"
          git diff --name-only -- . ':!**/.git/**' || true

      - name: Commit & push (if changed)
        if: ${{ steps.run.outputs.exit_code == '10' }}
        env:
          HEAD_BRANCH: ${{ inputs.head_branch }}
          COMMIT_MESSAGE: ${{ inputs.commit_message }}
        run: |
          set -euo pipefail
          git checkout "${HEAD_BRANCH}"
          git pull --ff-only origin "${HEAD_BRANCH}" || true
          git add -A
          git commit -m "${COMMIT_MESSAGE}"
          git push origin "HEAD:${HEAD_BRANCH}"
