#!/usr/bin/env bash
set -euo pipefail

# =========================
# Config (override via env)
# =========================
DEPB_PATH="${DEPB_PATH:-.github/dependabot.yml}"
INCLUDE_GITHUB_ACTIONS="${INCLUDE_GITHUB_ACTIONS:-true}"   # "false" to skip GH Actions stanza
DEFAULT_INTERVAL="${DEFAULT_INTERVAL:-daily}"               # dependabot schedule for terraform dirs
REPO_ROOT="${REPO_ROOT:-$(git rev-parse --show-toplevel 2>/dev/null || pwd)}"

# =========================
# Helpers
# =========================
log() { printf '%s\n' "$*" >&2; }
die() { log "❌ $*"; exit 1; }

require_tools() {
  for t in awk sort perl find; do
    command -v "$t" >/dev/null 2>&1 || die "$t is required"
  done
}

# Unique dirs that contain at least one .tf file (exclude .git)
find_tf_dirs() {
  dirs=()
  while IFS= read -r -d '' file; do
    dir="$(dirname "$file")"
    case "$dir" in
      "$REPO_ROOT"*) dir="${dir#"$REPO_ROOT"}" ;;
    esac
    [[ -z "$dir" ]] && dir="/"
    [[ "$dir" != /* ]] && dir="/$dir"
    dirs+=("$dir")
  done < <(find "$REPO_ROOT" -type f -name '*.tf' -not -path '*/.git/*' -print0)

  printf "%s\n" "${dirs[@]}" | sort -u
}

# Build dependabot.yml content to stdout
generate_dependabot_yaml() {
  local dirs=("$@")

  cat <<'YAML'
# Auto-generated by dependabot_refresh.sh
# See: https://docs.github.com/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file

version: 2
updates:
YAML

  if [[ "${INCLUDE_GITHUB_ACTIONS}" == "true" ]]; then
    cat <<'YAML'
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "daily"
    commit-message:
      prefix: "chore"
      include: "scope"
YAML
  fi

  for d in "${dirs[@]}"; do
    cat <<YAML
  - package-ecosystem: "terraform"
    directory: "${d}"
    schedule:
      interval: "${DEFAULT_INTERVAL}"
    commit-message:
      prefix: "chore"
      include: "scope"
YAML
  done
}

# Safe write to a path (no backup)
safe_write_file() {
  local target="$1"
  local temp="$2"

  mkdir -p "$(dirname "$target")"

  if [[ -f "$target" ]]; then
    if diff -q "$target" "$temp" >/dev/null 2>&1; then
      log "✅ ${target} already up to date."
      rm -f "$temp"
      return 0
    fi
  else
    log "🆕 ${target} does not exist; creating."
  fi

  mv -f "$temp" "$target"
  log "✅ Wrote ${target}"
}

# Rewrite Terraform module sources: github.com/... → git::https://github.com/...
rewrite_tf_sources() {
  local changed_files=0
  local matched_lines=0

  while IFS= read -r -d '' tf; do
    if grep -Eq 'source\s*=\s*"\s*github\.com/' "$tf"; then
      local count
      count=$(grep -E 'source\s*=\s*"\s*github\.com/' -n "$tf" | wc -l | tr -d ' ')
      matched_lines=$((matched_lines + count))
      perl -0777 -i -pe 's/(source\s*=\s*")\s*github\.com\//${1}git::https:\/\/github.com\//g' "$tf"
      changed_files=$((changed_files + 1))
    fi
  done < <(find "$REPO_ROOT" -type f -name '*.tf' -not -path '*/.git/*' -print0)

  log "🔧 Rewrote module sources in $changed_files file(s); matched $matched_lines source line(s)."
}

# =========================
# Main
# =========================
require_tools

log "📂 Repo root: $REPO_ROOT"
tf_dirs=()
while IFS= read -r line; do
  tf_dirs+=("$line")
done <<EOF
$(find_tf_dirs)
EOF

if [[ ${#tf_dirs[@]} -eq 0 ]]; then
  log "⚠️  No .tf files found; will still ensure dependabot.yml (github-actions only if enabled)."
fi

tmpfile="$(mktemp)"
generate_dependabot_yaml "${tf_dirs[@]}" > "$tmpfile"
safe_write_file "$DEPB_PATH" "$tmpfile"

rewrite_tf_sources

log "🎉 Done."
